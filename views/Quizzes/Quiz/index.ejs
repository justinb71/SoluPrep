<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-MB65CC4F');</script>
    <!-- End Google Tag Manager -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
<%- include('../../partials/profileNavbar'); %>
</head>

<body>
    <!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MB65CC4F"
    height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->
    <div class="main">
        <div class="line-wobble-frame">
            <div class="line-wobble"></div>
            <h2 style="position: relative; top:calc(50% - 100px)">Loading</h2>
        </div>
        
        
        <div class="quiz-quiz-header">
            <h1 id="quizName">A Level Mathematics Revision</h1>
            <h2>Topics:</h2>
            <h3>Diffrentiation, Binomial Expansion</h3>
        </div>
        <div class="quiz-quiz-questions-frame">
        </div>
    </div>
</body>

</html>

<style>
    .line-wobble-frame{
        width: calc(100% - 315px);
        
        height: 100vh;
        background: var(--gray-25, #FCFCFD);
        z-index: 4;
        position: fixed;
        left:312px;
        top:0px
    }
    .line-wobble {
 --uib-size: 80px;
 --uib-speed: 1.55s;
 --uib-color: black;
 --uib-line-weight: 5px;
 position: relative;
 width: 50%;
 left:25%;
 top:50%;
 height: 100%;
 display: flex;
 align-items: center;
 justify-content: center;
 height: var(--uib-line-weight);

 border-radius: calc(var(--uib-line-weight) / 2);
 overflow: hidden;
 transform: translate3d(0, 0, 0);
}

.line-wobble::before {
 content: '';
 position: absolute;
 top: 0;
 left: 0;
 height: 100%;
 width: 100%;
 background-color: var(--uib-color);
 opacity: 0.1;
}

.line-wobble::after {
 content: '';
 height: 100%;
 width: 100%;
 border-radius: calc(var(--uib-line-weight) / 2);
 animation: wobble var(--uib-speed) ease-in-out infinite;
 transform: translateX(-90%);
 background-color: var(--uib-color);
}

@keyframes wobble {
 0%,
  100% {
  transform: translateX(-90%);
 }

 50% {
  transform: translateX(90%);
 }
}

</style>

<script>




class createQuestion{

    constructor(){
        this.questionData = [];
    }

    generateUniqueId() {
        let id;
        do {
            id = Math.random().toString(36).substr(2, 9);
        } while (this.questionData.some(data => data[0] === id));
        return id;
    }
    
    createMultipleChoiceQuestion(questionText, options,questionId){
        
        this.questionData.push([questionId, 'Multiple Choice']);;

        const questionFrame = document.createElement('div');
        questionFrame.classList.add('quiz-quiz-question-frame');
        questionFrame.classList.add('multi');
        questionFrame.id = questionId;

        const questionTitle = document.createElement('h1');
        questionTitle.textContent = questionText;
        questionFrame.appendChild(questionTitle);

        const questionSubtitle = document.createElement('h2');
        questionSubtitle.textContent = "Select An Answer";
        questionFrame.appendChild(questionSubtitle);

        const questionTypeChip = document.createElement('span');
        questionTypeChip.classList.add('quiz-quiz-question-type-chip');
        questionTypeChip.style.backgroundColor = '#2E90FA';
        questionTypeChip.textContent = 'Multiple Choice';
        questionFrame.appendChild(questionTypeChip);

        const optionsContainer = document.createElement('div');
        optionsContainer.classList.add('quiz-quiz-question-radio-container');
        
        options.forEach((optionText, index) => {
            
            const optionWrapper = document.createElement('div');
            optionWrapper.classList.add('quiz-quiz-question-radio-wrapper');

            const label = document.createElement('label');
            label.classList.add('quiz-quiz-question-radio-button');
            label.htmlFor = `option${index + 1}-${questionId}`;

            const input = document.createElement('input');
            input.id = `option${index + 1}-${questionId}`;
            input.name = 'radio-group' + questionId;
            input.type = 'radio';

            const checkmark = document.createElement('span');
            checkmark.classList.add('quiz-quiz-question-radio-checkmark');

            const optionLabel = document.createElement('span');
            optionLabel.classList.add('quiz-quiz-question-radio-label');
            optionLabel.textContent = `${String.fromCharCode(65 + index)}. ${optionText}`;

            label.appendChild(input);
            label.appendChild(checkmark);
            label.appendChild(optionLabel);
            optionWrapper.appendChild(label);
            optionsContainer.appendChild(optionWrapper);
        });

        questionFrame.appendChild(optionsContainer);
        document.querySelector('.quiz-quiz-questions-frame').appendChild(questionFrame);
        
    };

    createShortAnswerQuestion(questionText){
        const questionId = this.generateUniqueId();
        this.questionData.push([questionId, 'Short Answer']);

        const questionFrame = document.createElement('div');
        questionFrame.classList.add('quiz-quiz-question-frame');
        questionFrame.id = questionId;
        const questionTypeChip = document.createElement('span');
        questionTypeChip.classList.add('quiz-quiz-question-type-chip');
        questionTypeChip.style.backgroundColor = '#6172F3';
        questionTypeChip.textContent = 'Short Answer';
        questionFrame.appendChild(questionTypeChip);

        const questionTitle = document.createElement('h1');
        questionTitle.textContent = questionText;
        questionFrame.appendChild(questionTitle);

        const answerInput = document.createElement('input');
        answerInput.type = 'text';
        answerInput.placeholder = 'Answer...';
        answerInput.style.width = 'calc(100% - 30px - 4rem)';
        answerInput.style.margin = '2rem';
        answerInput.style.marginTop = '0';
        questionFrame.appendChild(answerInput);

        document.querySelector('.quiz-quiz-questions-frame').appendChild(questionFrame);
        
    };

    createLongAnswerQuestion(questionText) {
        const questionId = this.generateUniqueId();
        this.questionData.push([questionId, 'Long Answer']);

        const questionFrame = document.createElement('div');
        questionFrame.classList.add('quiz-quiz-question-frame');
        questionFrame.id = questionId;

        const questionTypeChip = document.createElement('span');
        questionTypeChip.classList.add('quiz-quiz-question-type-chip');
        questionTypeChip.style.backgroundColor = '#F63D68';
        questionTypeChip.textContent = 'Long Answer';
        questionFrame.appendChild(questionTypeChip);

        const questionTitle = document.createElement('h1');
        questionTitle.textContent = questionText;
        questionFrame.appendChild(questionTitle);

        const answerTextarea = document.createElement('textarea');
        answerTextarea.placeholder = 'Answer...';
        questionFrame.appendChild(answerTextarea);
        answerTextarea.style.marginTop = '0';

        document.querySelector('.quiz-quiz-questions-frame').appendChild(questionFrame);
    }
}




async function fetchQuestions(quizID) {
  try {
    const url = `/user/quizzes/get-questions?quizID=${quizID}`;
    const options = {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        // Add any other headers if needed
      },
    };
    const response = await fetch(url, options);

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching data:", error);
    throw error;
  }
}

document.addEventListener("DOMContentLoaded", async function() {
    let instance = new createQuestion();
    // Define a sleep function
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function fadeLoop() {
        for (let i = 1; i > -1; i-=0.01) {
            await sleep(5);
            document.querySelector(".line-wobble-frame").style.opacity = i
        }
        document.querySelector(".line-wobble-frame").style.visibility = "hidden"
    }

    quizID = sessionStorage.getItem("quizID");
    quizID = quizID.toString();

    fetchQuestions(quizID)
    .then(result=>{

        questions = result.generatedQuestions;
        quizName = result.quizName[0].quiz_name;
        console.log(questions)
        answers = []
        questionIds = []

        document.querySelector("#quizName").textContent = quizName
    
      let questionNumber = 1
   Object.keys(questions).forEach(key => {
    
       const question = questions[key]["question"];
       
       try{
        answers.push(question["ANSWER"])
        questionIds.push(questions[key]["question_id"])
        if (question["TYPE"] == "Multiple Choice"){
            text = questionNumber + ". " + question["QUESTION"]
            options =  question["OPTIONS"]
            instance.createMultipleChoiceQuestion(text,options,(questions[key]["question_id"]));
        } else if (question["TYPE"] == "Short Answer"){
            instance.createShortAnswerQuestion(questionNumber + ". " + question["QUESTION"]);
        } else if (question["TYPE"] == "Long Answer"){
            instance.createLongAnswerQuestion(questionNumber + ". " + question["QUESTION"]);
        }
        questionNumber ++;
      }
      catch{
        
      }
      fadeLoop()
      
   });

   submitButton = document.createElement("button")
   submitButton.textContent = "Submit"
   submitButton.onclick = function(){
    for (let i = 0; i < answers.length; i++) {
        // Assuming questionIds is an array of valid HTML element IDs
        let questionElement = document.getElementById(questionIds[i]);

        // Check if the element is found before accessing its classList
        if (questionElement) {
            if (questionElement.classList.contains("multi")) {
                // Find the selected radio button within the current question
                const selectedRadioButton = questionElement.querySelector('input[type="radio"]:checked');

                if (selectedRadioButton) {
                    // Extract the option number from the selected radio button's ID
                    const optionNumber = selectedRadioButton.id.split('-')[0].replace('option', '') - 1;
                    
                    console.log(answers[i])
                    console.log(optionNumber)
                    if (optionNumber == answers[i]){
                        questionElement.classList.add("success")
                        questionElement.classList.remove("error")
                    }else{
                        questionElement.classList.add("error")
                        questionElement.classList.remove("success")
                    }
                    
                } else {
                    console.log(`Question ${questionIds[i]} - No option selected`);
                }
            }
        } 
    }


}
   
   document.querySelector(".quiz-quiz-questions-frame").appendChild(submitButton)
        
    })

    

    
    


});
</script>


<style>


</style>