<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Google Tag Manager -->
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer','GTM-MB65CC4F');</script>
    <!-- End Google Tag Manager -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Include MathJax -->
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
          jax: ["input/TeX", "output/HTML-CSS"],
          extensions: ["tex2jax.js"],
          "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] },
          tex2jax: { inlineMath: [ ["$", "$"], ["\\(","\\)"] ], displayMath: [ ["$$","$$"], ["\\[", "\\]"] ], processEscapes: true, ignoreClass: "tex2jax_ignore|dno" },
          TeX: { noUndefined: { attributes: { mathcolor: "red", mathbackground: "#FFEEEE", mathsize: "90%" } } },
          messageStyle: "none"
        });
        </script>    
        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
    
    <!-- End MathJax -->

    <%- include('../../partials/profileNavbar'); %>
</head>

<body>
    
    <!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-MB65CC4F"
    height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->
    <div class="main">
        <div class="line-wobble-frame">
            <div class="line-wobble"></div>
            <h2 class="loadingText" style="position: relative; top:calc(50% - 100px)">Loading</h2>
        </div>
        
        
        <div class="quiz-quiz-header">
            <h1 id="quizName">None</h1>
            
            <h2>Topics:</h2>
            <h3 id="quizTopics">None</h3>
        </div>
        <div class="quiz-quiz-questions-frame">
        </div>
    </div>
</body>

</html>

<script>



// Class to handle the creation of quiz questions
class CreateQuestion {

    // Constructor initializes an empty array to store question data
    constructor() {
        this.questionData = [];
    }

    // Method to generate a unique ID for each question
    generateUniqueId() {
        let id;
        do {
            id = Math.random().toString(36).substr(2, 9);
        } while (this.questionData.some(data => data[0] === id));
        return id;
    }

    // Method to create multiple-choice questions
    createMultipleChoiceQuestion(questionText, options, questionId) {
        
        // Adding question data to the array
        this.questionData.push([questionId, 'Multiple Choice']);

        // Creating HTML elements for the question
        const questionFrame = document.createElement('div');
        questionFrame.classList.add('quiz-quiz-question-frame');
        questionFrame.classList.add('multi');
        questionFrame.id = questionId;

        const questionTitle = document.createElement('h1');
        questionTitle.textContent = questionText;

        questionFrame.appendChild(questionTitle);

        const markText = document.createElement("h2");
        markText.innerHTML = '[1]';
        markText.classList.add("quiz-mark-text")
        questionFrame.appendChild(markText);

        const questionSubtitle = document.createElement('h2');
        questionSubtitle.textContent = "Select An Answer";
        questionFrame.appendChild(questionSubtitle);

        const questionTypeChip = document.createElement('span');
        questionTypeChip.classList.add('quiz-quiz-question-type-chip');
        questionTypeChip.style.backgroundColor = '#2E90FA';
        questionTypeChip.textContent = 'Multiple Choice';
        questionFrame.appendChild(questionTypeChip);

        const optionsContainer = document.createElement('div');
        optionsContainer.classList.add('quiz-quiz-question-radio-container');
        
        // Creating radio buttons for each option
        options.forEach((optionText, index) => {
            const optionWrapper = document.createElement('div');
            optionWrapper.classList.add('quiz-quiz-question-radio-wrapper');

            const label = document.createElement('label');
            label.classList.add('quiz-quiz-question-radio-button');
            label.htmlFor = `option${index + 1}-${questionId}`;

            const input = document.createElement('input');
            input.id = `option${index + 1}-${questionId}`;
            input.name = 'radio-group' + questionId;
            input.type = 'radio';

            const checkmark = document.createElement('span');
            checkmark.classList.add('quiz-quiz-question-radio-checkmark');

            const optionLabel = document.createElement('span');
            optionLabel.classList.add('quiz-quiz-question-radio-label');
            optionLabel.textContent = `${String.fromCharCode(65 + index)}. ${optionText}`;

            label.appendChild(input);
            label.appendChild(checkmark);
            label.appendChild(optionLabel);
            optionWrapper.appendChild(label);
            optionsContainer.appendChild(optionWrapper);
        });

        questionFrame.appendChild(optionsContainer);

        // Appending the question frame to the quiz container
        document.querySelector('.quiz-quiz-questions-frame').appendChild(questionFrame);

        // Rendering MathJax for mathematical expressions
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, document.querySelector('.quiz-quiz-questions-frame')]);
    };

    // Method to create short answer questions
    createShortAnswerQuestion(questionText, marks, questionId) {
        
        // Adding question data to the array
        this.questionData.push([questionId, 'Short Answer']);

        // Creating HTML elements for the question
        const questionFrame = document.createElement('div');
        questionFrame.classList.add('quiz-quiz-question-frame');
        questionFrame.classList.add('latex');
        questionFrame.id = questionId;

        const questionTypeChip = document.createElement('span');
        questionTypeChip.classList.add('quiz-quiz-question-type-chip');
        questionTypeChip.style.backgroundColor = '#6172F3';
        questionTypeChip.textContent = 'Short Answer';
        questionFrame.appendChild(questionTypeChip);

        const questionTitle = document.createElement('h1');
        
        questionTitle.innerHTML = questionText; 
        questionFrame.appendChild(questionTitle);

        const markText = document.createElement("h2");
        markText.innerHTML = '[' + marks + ']';
        markText.classList.add("quiz-mark-text")
        questionFrame.appendChild(markText);

        const answerInput = document.createElement('input');
        answerInput.type = 'text';
        answerInput.classList.add("Quiz-Answer");
        answerInput.placeholder = 'Answer...';
        answerInput.style.width = 'calc(100% - 30px - 4rem)';
        answerInput.style.margin = '2rem';
        answerInput.style.marginTop = '0';
        questionFrame.appendChild(answerInput);

        // Appending the question frame to the quiz container
        document.querySelector('.quiz-quiz-questions-frame').appendChild(questionFrame);

        // Rendering MathJax for mathematical expressions
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, document.querySelector('.quiz-quiz-questions-frame')]);
    };

    // Method to create long answer questions
    createLongAnswerQuestion(questionText, marks, questionId) {
        
        // Adding question data to the array
        this.questionData.push([questionId, 'Long Answer']);

        // Creating HTML elements for the question
        const questionFrame = document.createElement('div');
        questionFrame.classList.add('quiz-quiz-question-frame');
        questionFrame.id = questionId;

        const questionTypeChip = document.createElement('span');
        questionTypeChip.classList.add('quiz-quiz-question-type-chip');
        questionTypeChip.style.backgroundColor = '#F63D68';
        questionTypeChip.textContent = 'Long Answer';
        questionFrame.appendChild(questionTypeChip);

        const questionTitle = document.createElement('h1');
        questionTitle.textContent = questionText;
        questionFrame.appendChild(questionTitle);

        const markText = document.createElement("h2");
        markText.innerHTML = '[' + marks + ']';
        markText.classList.add("quiz-mark-text")
        questionFrame.appendChild(markText);

        const answerInput = document.createElement('input');
        answerInput.type = 'text';
        answerInput.classList.add("Quiz-Answer");
        answerInput.placeholder = 'Answer...';
        answerInput.style.width = 'calc(100% - 30px - 4rem)';
        answerInput.style.margin = '2rem';
        answerInput.style.marginTop = '0';
        questionFrame.appendChild(answerInput);

        // Appending the question frame to the quiz container
        document.querySelector('.quiz-quiz-questions-frame').appendChild(questionFrame);

        // Rendering MathJax for mathematical expressions
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, document.querySelector('.quiz-quiz-questions-frame')]);
    }
}

// Function to find a 2D array containing a specific element
function findArrayWithElement(array2D, element) {
    for (let i = 0; i < array2D.length; i++) {
        for (let j = 0; j < array2D[i].length; j++) {
            if (array2D[i][j] === element) {
                return array2D[i];
            }
        }
    }
    // If no array with the element is found, you can return null or handle it as needed
    return null;
}

// Function to fetch quiz questions asynchronously
async function fetchQuestions(quizID) {
  try {
    const url = `/user/quizzes/get-questions?quizID=${quizID}`;
    const options = {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        // Add any other headers if needed
      },
    };
    const response = await fetch(url, options);

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching data:", error);
    throw error;
  }
}

// Event listener for when the DOM content is loaded
document.addEventListener("DOMContentLoaded", async function () {
    // Create an instance of createQuestion
    let instance = new CreateQuestion();

    // Define a sleep function
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Asynchronous function to create a fading effect
    async function fadeLoop() {
        for (let i = 1; i > -1; i -= 0.01) {
            await sleep(5);
            document.querySelector(".line-wobble-frame").style.opacity = i;
        }
        document.querySelector(".line-wobble-frame").style.visibility = "hidden";
    }

    // Retrieve quizID from sessionStorage
    let quizID = sessionStorage.getItem("quizID");
    quizID = quizID.toString();

    // Fetch questions for the quizID
    fetchQuestions(quizID)
        .then(result => {
            // Extract relevant data from the result
            let questions = result.generatedQuestions;
            let quizName = result.quizName[0].quiz_name;
            console.log(questions);

            // Initialize arrays to store question data
            let questionIds = [];
            let topics = [];
            let question_data = [];

            // Set the quizName in the corresponding HTML element
            document.querySelector("#quizName").textContent = quizName;

            // Counter for question numbers
            let questionNumber = 1;

            // Loop through the questions
            Object.keys(questions).forEach(key => {
                const question = questions[key]["question_data"];
                console.log(question)

                try {
                    // Push relevant data to arrays
                    question_data.push([question["QUESTION"], question["ANSWER"], question["MARKS"], questions[key]["question_id"]]);
                    questionIds.push(questions[key]["question_id"]);
                    topics.push(question["TOPIC"]);

                    // Create question based on its type
                    if (question["TYPE"] == "Multiple Choice") {
                        text = questionNumber + ". " + question["QUESTION"];
                        options = question["OPTIONS"];

                        instance.createMultipleChoiceQuestion(text, options, questions[key]["question_id"]);
                    } else if (question["TYPE"] == "Short Answer") {
                        
                        instance.createShortAnswerQuestion(questionNumber + ". " + question["QUESTION"], question["MARKS"], questions[key]["question_id"]);
                    } else if (question["TYPE"] == "Long Answer") {
                        instance.createLongAnswerQuestion(questionNumber + ". " + question["QUESTION"], question["MARKS"], questions[key]["question_id"]);
                    }
                    questionNumber++;
                } catch {
                    // Handle any errors
                }
                // Call fadeLoop function
                fadeLoop();
            });

            // Set the quizTopics in the corresponding HTML element
            document.querySelector("#quizTopics").textContent = topics;

            // Asynchronous function to mark quiz questions
            async function marker(questions, questionIds) {

                // Adds a Loading message
                document.querySelector(".loadingText").innerHTML = "Marking";
                document.querySelector(".line-wobble-frame").style.visibility = "visible";
                document.querySelector(".line-wobble-frame").style.opacity = 1;

                // Arrays to store questions to be marked and marked questions
                let questionsToBeMarked = [];
                let markedQuestions = questionsToBeMarked;

                // Loop through the questions
                for (let i = 0; i < questions.length; i++) {

                    // Assuming questionIds is an array of valid HTML element IDs
                    let questionElement = document.getElementById(questions[i][3]);

                    // Check if the element is found before accessing its classList
                    if (questionElement) {
                        if (questionElement.classList.contains("multi")) {
                            // Handle multi-class questions if needed
                        } else {
                            // Push the question data to the array for marking
                            questions[i].push(questionElement.querySelector(".Quiz-Answer").value);
                            questionsToBeMarked.push(questions[i]);
                        }
                    }
                }

                // Check if there are questions to be marked
                if (questionsToBeMarked.length != 0) {

                    // Store questions to be marked and send a POST request to mark them
                    markedQuestions = questionsToBeMarked;
                    fetch('/user/markQuiz', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ "questions": questionsToBeMarked })
                        })
                        .then(async response => {
                            if (response.ok) {
                                // Process the response and update the marked questions
                                const responseBody = await response.json().then(res => {
                                    for (i = 0; i < res["result"].length; i++) {
                                        markedQuestions[i].push(res["result"][i]);
                                    }
                                });

                                // Log marked questions, store them in sessionStorage, and navigate to the marked quizzes page
                                console.log(markedQuestions);
                                sessionStorage.setItem("MarkedQuestions", JSON.stringify({ "questions": markedQuestions }));

                                document.querySelector(".line-wobble-frame").style.visibility = "hidden";
                                document.querySelector(".line-wobble-frame").style.opacity = 0;
                                window.location.href = "/user/quizzes/marked";

                            } else {
                                console.error('Error:', response.statusText);
                            }
                        })
                        .catch(error => {
                            console.error('Fetch error:', error);
                        });
                }
            };

            // Create a submit button and append it to the quiz questions frame
            submitButton = document.createElement("button");
            submitButton.textContent = "Submit";
            submitButton.classList.add("quiz-submit-button");
            submitButton.onclick = async function () {
                // Call the marker function on button click
                await marker(question_data, questionIds);
            }

            document.querySelector(".quiz-quiz-questions-frame").appendChild(submitButton);

        })
});


</script>


<style>
    .line-wobble-frame{
        width: calc(100% - 315px);
        
        height: 100vh;
        background: var(--gray-25, #FCFCFD);
        z-index: 4;
        position: fixed;
        left:312px;
        top:0px
    }
    .line-wobble {
 --uib-size: 80px;
 --uib-speed: 1.55s;
 --uib-color: black;
 --uib-line-weight: 5px;
 position: relative;
 width: 50%;
 left:25%;
 top:50%;
 height: 100%;
 display: flex;
 align-items: center;
 justify-content: center;
 height: var(--uib-line-weight);

 border-radius: calc(var(--uib-line-weight) / 2);
 overflow: hidden;
 transform: translate3d(0, 0, 0);
}

.line-wobble::before {
 content: '';
 position: absolute;
 top: 0;
 left: 0;
 height: 100%;
 width: 100%;
 background-color: var(--uib-color);
 opacity: 0.1;
}

.line-wobble::after {
 content: '';
 height: 100%;
 width: 100%;
 border-radius: calc(var(--uib-line-weight) / 2);
 animation: wobble var(--uib-speed) ease-in-out infinite;
 transform: translateX(-90%);
 background-color: var(--uib-color);
}

@keyframes wobble {
 0%,
  100% {
  transform: translateX(-90%);
 }

 50% {
  transform: translateX(90%);
 }
}

.quiz-submit-button{
    background-color: var(--gray-200);
}

</style>